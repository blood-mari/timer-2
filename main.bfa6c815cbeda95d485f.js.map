{"version":3,"sources":["webpack:///./index.js"],"names":["$el","require","$","countdown_interval","total_seconds","init","this","hours","find","minutes","seconds","values","parent","attr","count","that","$hour_1","eq","$hour_2","$min_1","$min_2","$sec_1","$sec_2","setInterval","checkHour","clearInterval","animateFigure","value","$top","$bottom","$back_top","$back_bottom","html","TweenMax","to","rotationX","transformPerspective","ease","Quart","easeOut","onComplete","set","clearProps","$el_1","$el_2","val_1","toString","charAt","val_2","fig_1_value","fig_2_value"],"mappings":"oHAAA,8CAKkB,CAGdA,IANIC,EAAS,OAMRC,CAAE,cAGPC,mBAAoB,KACpBC,cAAoB,EAGpBC,KAAM,WAGAC,KAAKJ,EAAI,CACTK,MAASD,KAAKN,IAAIQ,KAAK,4BACvBC,QAASH,KAAKN,IAAIQ,KAAK,0BACvBE,QAASJ,KAAKN,IAAIQ,KAAK,2BAI3BF,KAAKK,OAAS,CACRJ,MAASD,KAAKJ,EAAEK,MAAMK,SAASC,KAAK,mBACtCJ,QAASH,KAAKJ,EAAEO,QAAQG,SAASC,KAAK,mBACtCH,QAASJ,KAAKJ,EAAEQ,QAAQE,SAASC,KAAK,oBAI1CP,KAAKF,cAAoC,GAApBE,KAAKK,OAAOJ,MAAa,GAA4B,GAAtBD,KAAKK,OAAOF,QAAgBH,KAAKK,OAAOD,QAG5FJ,KAAKQ,SAGPA,MAAO,WAEL,IAAIC,EAAUT,KACVU,EAAUV,KAAKJ,EAAEK,MAAMU,GAAG,GAC1BC,EAAUZ,KAAKJ,EAAEK,MAAMU,GAAG,GAC1BE,EAAUb,KAAKJ,EAAEO,QAAQQ,GAAG,GAC5BG,EAAUd,KAAKJ,EAAEO,QAAQQ,GAAG,GAC5BI,EAAUf,KAAKJ,EAAEQ,QAAQO,GAAG,GAC5BK,EAAUhB,KAAKJ,EAAEQ,QAAQO,GAAG,GAE5BX,KAAKH,mBAAqBoB,aAAY,WAEnCR,EAAKX,cAAgB,KAElBW,EAAKJ,OAAOD,QAEXK,EAAKJ,OAAOF,SAAW,GAAKM,EAAKJ,OAAOD,QAAU,IAEjDK,EAAKJ,OAAOD,QAAU,KACpBK,EAAKJ,OAAOF,SAGfM,EAAKJ,OAAOJ,OAAS,GAAKQ,EAAKJ,OAAOF,QAAU,IAE/CM,EAAKJ,OAAOF,QAAU,KACpBM,EAAKJ,OAAOJ,OAKlBQ,EAAKS,UAAUT,EAAKJ,OAAOJ,MAAOS,EAASE,GAG3CH,EAAKS,UAAUT,EAAKJ,OAAOF,QAASU,EAAQC,GAG5CL,EAAKS,UAAUT,EAAKJ,OAAOD,QAASW,EAAQC,KAE1CP,EAAKX,eAGPqB,cAAcV,EAAKZ,sBAExB,MAGLuB,cAAe,SAAS1B,EAAK2B,GAE1B,IACQC,EAAe5B,EAAIQ,KAAK,QAC5BqB,EAAe7B,EAAIQ,KAAK,WACxBsB,EAAe9B,EAAIQ,KAAK,aACxBuB,EAAe/B,EAAIQ,KAAK,gBAG7BsB,EAAUtB,KAAK,QAAQwB,KAAKL,GAG5BI,EAAavB,KAAK,QAAQwB,KAAKL,GAG/BM,IAASC,GAAGN,EAAM,GAAK,CACnBO,UAAsB,UACtBC,qBAAsB,IACpBC,KAAsBC,IAAMC,QAC9BC,WAAsB,WAElBZ,EAAKI,KAAKL,GAEVE,EAAQG,KAAKL,GAEbM,IAASQ,IAAIb,EAAM,CAAEO,UAAW,OAIxCF,IAASC,GAAGJ,EAAW,GAAK,CACxBK,UAAsB,EACtBC,qBAAsB,IACpBC,KAAsBC,IAAMC,QAC9BG,WAAsB,SAI5BlB,UAAW,SAASG,EAAOgB,EAAOC,GAEhC,IAAIC,EAAclB,EAAMmB,WAAWC,OAAO,GACtCC,EAAcrB,EAAMmB,WAAWC,OAAO,GACtCE,EAAcN,EAAMnC,KAAK,QAAQwB,OACjCkB,EAAcN,EAAMpC,KAAK,QAAQwB,OAElCL,GAAS,IAGLsB,IAAgBJ,GAAOvC,KAAKoB,cAAciB,EAAOE,GACjDK,IAAgBF,GAAO1C,KAAKoB,cAAckB,EAAOI,KAKjC,MAAhBC,GAAqB3C,KAAKoB,cAAciB,EAAO,GAC/CO,IAAgBL,GAAOvC,KAAKoB,cAAckB,EAAOC,OAMlDxC,S","file":"main.bfa6c815cbeda95d485f.js","sourcesContent":["import \"./sass/main.scss\";\nimport {TweenMax, Quart} from \"gsap\";\nvar $ = require( \"jquery\" );\n\n// Create Countdown\nconst Countdown = {\n\n    // Backbone-like structure\n    $el: $('.countdown'),\n\n    // Params\n    countdown_interval: null,\n    total_seconds     : 0,\n\n    // Initialize the countdown\n    init: function() {\n\n      // DOM\n          this.$ = {\n          hours  : this.$el.find('.bloc-time.hours .figure'),\n          minutes: this.$el.find('.bloc-time.min .figure'),\n          seconds: this.$el.find('.bloc-time.sec .figure')\n         };\n\n      // Init countdown values\n      this.values = {\n            hours  : this.$.hours.parent().attr('data-init-value'),\n          minutes: this.$.minutes.parent().attr('data-init-value'),\n          seconds: this.$.seconds.parent().attr('data-init-value'),\n      };\n\n      // Initialize total seconds\n      this.total_seconds = this.values.hours * 60 * 60 + (this.values.minutes * 60) + this.values.seconds;\n\n      // Animate countdown to the end\n      this.count();\n    },\n\n    count: function() {\n\n      var that    = this,\n          $hour_1 = this.$.hours.eq(0),\n          $hour_2 = this.$.hours.eq(1),\n          $min_1  = this.$.minutes.eq(0),\n          $min_2  = this.$.minutes.eq(1),\n          $sec_1  = this.$.seconds.eq(0),\n          $sec_2  = this.$.seconds.eq(1);\n\n          this.countdown_interval = setInterval(function() {\n\n          if(that.total_seconds > 0) {\n\n              --that.values.seconds;\n\n              if(that.values.minutes >= 0 && that.values.seconds < 0) {\n\n                  that.values.seconds = 59;\n                  --that.values.minutes;\n              }\n\n              if(that.values.hours >= 0 && that.values.minutes < 0) {\n\n                  that.values.minutes = 59;\n                  --that.values.hours;\n              }\n\n              // Update DOM values\n              // Hours\n              that.checkHour(that.values.hours, $hour_1, $hour_2);\n\n              // Minutes\n              that.checkHour(that.values.minutes, $min_1, $min_2);\n\n              // Seconds\n              that.checkHour(that.values.seconds, $sec_1, $sec_2);\n\n              --that.total_seconds;\n          }\n          else {\n              clearInterval(that.countdown_interval);\n          }\n      }, 1000);\n    },\n\n    animateFigure: function($el, value) {\n\n       var that         = this,\n               $top         = $el.find('.top'),\n           $bottom      = $el.find('.bottom'),\n           $back_top    = $el.find('.top-back'),\n           $back_bottom = $el.find('.bottom-back');\n\n      // Before we begin, change the back value\n      $back_top.find('span').html(value);\n\n      // Also change the back bottom value\n      $back_bottom.find('span').html(value);\n\n      // Then animate\n      TweenMax.to($top, 0.8, {\n          rotationX           : '-180deg',\n          transformPerspective: 300,\n            ease                : Quart.easeOut,\n          onComplete          : function() {\n\n              $top.html(value);\n\n              $bottom.html(value);\n\n              TweenMax.set($top, { rotationX: 0 });\n          }\n      });\n\n      TweenMax.to($back_top, 0.8, {\n          rotationX           : 0,\n          transformPerspective: 300,\n            ease                : Quart.easeOut,\n          clearProps          : 'all'\n      });\n    },\n\n    checkHour: function(value, $el_1, $el_2) {\n\n      var val_1       = value.toString().charAt(0),\n          val_2       = value.toString().charAt(1),\n          fig_1_value = $el_1.find('.top').html(),\n          fig_2_value = $el_2.find('.top').html();\n\n      if(value >= 10) {\n\n          // Animate only if the figure has changed\n          if(fig_1_value !== val_1) this.animateFigure($el_1, val_1);\n          if(fig_2_value !== val_2) this.animateFigure($el_2, val_2);\n      }\n      else {\n\n          // If we are under 10, replace first figure with 0\n          if(fig_1_value !== '0') this.animateFigure($el_1, 0);\n          if(fig_2_value !== val_1) this.animateFigure($el_2, val_1);\n      }\n    }\n  };\n\n  // Let's go !\n  Countdown.init();"],"sourceRoot":""}